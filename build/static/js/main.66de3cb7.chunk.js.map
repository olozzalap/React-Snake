{"version":3,"sources":["logo.svg","SnakeGame.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","gameTimer","SnakeGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","boardX","boardY","snakeSquares","x","y","foodSquare","direction","_this2","startGame","document","addEventListener","e","console","warn","keyCode","newDirection","setState","_this3","setInterval","advanceSnake","clearInterval","board","push","parseSquareOccupied","matchingSquare","find","square","widthAndHeightPercents","width","height","react_default","a","createElement","className","style","nextSnakeHead","error","endGame","newSnakeSquares","slice","unshift","Math","floor","random","pop","parseBoard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_SnakeGame","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66de3cb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet gameTimer;\n\nclass SnakeGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardX: 10,\n      boardY: 10,\n      snakeSquares: [\n        {x: 5, y: 5},\n        {x: 4, y: 5}\n      ],\n      foodSquare: {x: 7, y: 4},\n      direction: \"up\"\n    }\n  }\n  componentDidMount() {\n    this.startGame();\n    document.addEventListener(\"keydown\", (e) => {\n      console.warn(e.keyCode);\n      let newDirection = this.state.direction;\n      if (e.keyCode == '38' && this.state.direction !== \"down\") {\n        newDirection = \"up\";\n      }\n      else if (e.keyCode == '40' && this.state.direction !== \"up\") {\n        newDirection = \"down\";\n      }\n      else if (e.keyCode == '37' && this.state.direction !== \"right\") {\n        newDirection = \"left\";\n      }\n      else if (e.keyCode == '39' && this.state.direction !== \"left\") {\n        newDirection = \"right\";\n      }\n      this.setState({\n        direction: newDirection\n      }, () => {\n        console.warn(this.state.direction);\n      })\n    })\n  }\n\n  startGame() {\n    gameTimer = setInterval(() => {\n      this.advanceSnake();\n    }, 1000)\n  }\n  endGame() {\n    console.warn(gameTimer);\n    clearInterval(gameTimer);\n  }\n  parseBoard() {\n    let board = [];\n    for (let y = this.state.boardY - 1; y >= 0; y--) {\n      // console.warn(y);\n      for (let x = 0; x < this.state.boardX; x++) {\n        // console.warn(x, y);\n        board.push(this.parseSquareOccupied(x, y));\n      }\n    }\n    return board;\n  }\n  parseSquareOccupied(x, y) {\n    let matchingSquare = this.state.snakeSquares.find((square) => {\n      return square.x === x && square.y === y;\n    });\n    const widthAndHeightPercents = {\"width\": 100 / this.state.boardX + \"%\", \"height\": 100 / this.state.boardY + \"%\"};\n    // console.warn(matchingSquare);\n    if (matchingSquare) {\n      return (\n        <div className=\"square filled\" style={widthAndHeightPercents}>{x}, {y}</div>\n      )\n    }\n    else if (x === this.state.foodSquare.x && y === this.state.foodSquare.y) {\n      return (\n        <div className=\"square food\" style={widthAndHeightPercents}>{x}, {y}</div>\n      )\n    }\n    else {\n      return (\n        <div className=\"square\" style={widthAndHeightPercents}>{x}, {y}</div>\n      )\n    }\n  }\n  advanceSnake() {\n    let nextSnakeHead = {\n      x: this.state.snakeSquares[0].x,\n      y: this.state.snakeSquares[0].y\n    }\n    if (this.state.direction === \"up\") {\n      nextSnakeHead.y++;\n    }\n    else if (this.state.direction === \"down\") {\n      nextSnakeHead.y--;\n    }\n    else if (this.state.direction === \"left\") {\n      nextSnakeHead.x--;\n    }\n    else if (this.state.direction === \"right\") {\n      nextSnakeHead.x++;\n    }\n    console.warn(this.state.snakeSquares, nextSnakeHead);\n\n    let nextSnakeHeadCollision = this.state.snakeSquares.find((square) => {\n      return square.x === nextSnakeHead.x && square.y === nextSnakeHead.y;\n    })\n\n    if (nextSnakeHeadCollision) {\n      console.error(\"you lose, collidede with yourself :0\");\n      this.endGame();\n    }\n    else if (nextSnakeHead.x < 0) {\n      console.error(\"you lose, went over the left edge of the board\");\n      this.endGame();\n    }\n    else if (nextSnakeHead.y < 0) {\n      console.error(\"you lose, went over the bottom edge of the board\");\n      this.endGame();\n    }\n    else if (nextSnakeHead.x >= this.state.boardX) {\n      console.error(\"you lose, went over the right edge of the board\");\n      this.endGame();\n    }\n    else if (nextSnakeHead.y >= this.state.boardY) {\n      console.error(\"you lose, went over the top edge of the board\");\n      this.endGame();\n    }\n    else {\n      let newSnakeSquares = this.state.snakeSquares.slice();\n      newSnakeSquares.unshift(nextSnakeHead);\n\n      if (nextSnakeHead.y === this.state.foodSquare.y && nextSnakeHead.x === this.state.foodSquare.x) {\n        console.warn(\"gratz you got zee food\");\n        // TODO ensure new foodSquare isn't already a square occupied by the Snake\n        this.setState({\n          foodSquare: {\n            x: Math.floor((Math.random() * this.state.boardX)),\n            y: Math.floor((Math.random() * this.state.boardY))\n          },\n          snakeSquares: newSnakeSquares\n        })\n      }\n      else {\n        newSnakeSquares.pop();\n        console.warn(newSnakeSquares);\n        this.setState({\n          snakeSquares: newSnakeSquares\n        })\n      }\n    }\n  }\n  \n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.parseBoard()}\n      </div>\n    )\n  };\n}\n\nexport default SnakeGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SnakeGame from './SnakeGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SnakeGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}